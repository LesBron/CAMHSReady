{
  "author": {
    "name": "revolunet"
  },
  "name": "angular-google-analytics",
  "description": "Easy Analytics for your AngularJS application",
  "version": "0.0.15",
  "homepage": "https://github.com/revolunet/angular-google-analytics",
  "repository": {
    "type": "git",
    "url": "git://github.com/revolunet/angular-google-analytics.git"
  },
  "main": "./dist/angular-google-analytics.min.js",
  "dependencies": {
    "angular": ">=1"
  },
  "devDependencies": {
    "angular-mocks": ">=1",
    "angular-scenario": ">=1"
  },
  "gitHead": "966ec3a7752cfe6eb11c5649134bb07e21d1207c",
  "readme": "# angular-google-analytics\n\nThis service lets you integrate google analytics tracker in your AngularJS applications easily.\n\nYou can use basic functions, `Analytics.trackEvent('video', 'play', 'django.mp4');` or more advanced e-commerce features like product tracking, promo codes, transactions...\n\nProudly brought to you by [@revolunet](http://twitter.com/revolunet) and [@deltaepsilon](https://github.com/deltaepsilon).\n\n## features\n\n - configurable\n - automatic page tracking\n - events tracking\n - e-commerce tracking\n - enhanced e-commerce tracking\n - multiple-domains\n - ga.js and and analytics.js support\n - cross-domain support\n - multiple tracking objects\n\n## install\n\n`bower install angular-google-analytics`\n\nOr alternatively, grab the dist/angular-google-analytics.min.js and include it in your project\n\n## example\n\n```js\nvar app = angular.module('app', ['angular-google-analytics'])\n    .config(function(AnalyticsProvider) {\n        // initial configuration\n        AnalyticsProvider.setAccount('UA-XXXXX-xx');\n        // using multiple tracking objects (analytics.js only)\n        // AnalyticsProvider.setAccount([\n        //   { tracker: 'UA-12345-12', name: \"tracker1\" },\n        //   { tracker: 'UA-12345-34', name: \"tracker2\" }\n        // ]);\n\n        // track all routes (or not)\n        AnalyticsProvider.trackPages(true);\n\t\t\t\t\n        // track all url query params (default is false)\n        AnalyticsProvider.trackUrlParams(true);\n\n        // Optional set domain (Use 'none' for testing on localhost)\n        // AnalyticsProvider.setDomainName('XXX');\n\n        // Use display features plugin\n        AnalyticsProvider.useDisplayFeatures(true);\n\n        // url prefix (default is empty)\n        // - for example: when an app doesn't run in the root directory\n        AnalyticsProvider.trackPrefix('my-application');\n\n        // Use analytics.js instead of ga.js\n        AnalyticsProvider.useAnalytics(true);\n\n        // Use cross domain linking\n        AnalyticsProvider.useCrossDomainLinker(true);\n        AnalyticsProvider.setCrossLinkDomains(['domain-1.com', 'domain-2.com']);\n\n        // Ignore first page view... helpful when using hashes and whenever your bounce rate looks obscenely low.\n        AnalyticsProvider.ignoreFirstPageLoad(true);\n\n        // Enabled eCommerce module for analytics.js(uses legacy ecommerce plugin)\n        AnalyticsProvider.useECommerce(true, false);\n\n        // Enabled eCommerce module for analytics.js(uses ec plugin instead of ecommerce plugin)\n        AnalyticsProvider.useECommerce(true, true);\n\n        // Enable enhanced link attribution\n        AnalyticsProvider.useEnhancedLinkAttribution(true);\n\n        // Enable analytics.js experiments\n        AnalyticsProvider.setExperimentId('12345');\n\n        // Set custom cookie parameters for analytics.js\n        AnalyticsProvider.setCookieConfig({\n          cookieDomain: 'foo.example.com',\n          cookieName: 'myNewName',\n          cookieExpires: 20000\n        });\n\n        // change page event name\n        AnalyticsProvider.setPageEvent('$stateChangeSuccess');\n\n\n        // Delay script tage creation\n        // must manually call Analytics.createScriptTag(cookieConfig) or Analytics.createAnalyticsScriptTag(cookieConfig)\n        AnalyticsProvider.delayScriptTag(true);\n    }))\n    .run(function(Analytics) {\n      // In case you are relying on automatic page tracking, you need to inject Analytics\n      // at least once in your application (for example in the main run() block)\n    })\n    .controller('SampleController', function(Analytics) {\n        // create a new pageview event\n        Analytics.trackPage('/video/detail/XXX');\n\n        // or create a new pageview event with optional page title\n        Analytics.trackPage('/video/detail/XXX', 'Video XXX');\n\n        // or create a new pageview event with optional page title, custom dimension and metric\n        // (analytics.js only)\n        Analytics.trackPage('/video/detail/XXX', 'Video XXX', {dimension15: 'My Custom Dimension', metric18: 8000});\n\n        // create a new tracking event\n        Analytics.trackEvent('video', 'play', 'django.mp4');\n\n        // create a new tracking event with optional value\n        Analytics.trackEvent('video', 'play', 'django.mp4', 4);\n\n        // create a new tracking event with optional value and noninteraction flag\n        Analytics.trackEvent('video', 'play', 'django.mp4', 4, true);\n\n        // create a new tracking event with optional value, noninteraction flag, and custom dimension and metric\n        // (analytics.js only)\n        Analytics.trackEvent('video', 'play', 'django.mp4', 4, true, {dimension15: 'My Custom Dimension', metric18: 8000});\n\n        // tracking e-commerce\n        // - create transaction\n        Analytics.addTrans('1', '', '2.42', '0.42', '0', 'Amsterdam', '', 'Netherlands', 'EUR');\n\n        // - add items to transaction\n        Analytics.addItem('1', 'sku-1', 'Test product 1', 'Testing', '1', '1');\n        Analytics.addItem('1', 'sku-2', 'Test product 2', 'Testing', '1', '1');\n\n        // - complete transaction\n        Analytics.trackTrans();\n\n        // Enhanced Ecommerce Tracking\n\n        // Product Impression Tracking\n        Analytics.addImpression(productId, name, list, brand, category, variant, position, price);\n        Analytics.pageView();\n        // example:\n        Analytics.addImpression('sku-1', 'Test Product 1', 'Category List', 'Brand 1', 'Category-1', 'variant-1', '1', '24990');\n        Analytics.addImpression('sku-2', 'Test Product 2', 'Category List', 'Brand 2', 'Category-1', 'variant-3', '2', '2499');\n        Analytics.pageView();\n\n        // Product Click Tracking\n        Analytics.addProduct(productId, name, category, brand, variant, price, quantity, coupon, position);\n        Analytics.productClick(listName);\n        // example:\n        Analytics.addProduct('sku-2', 'Test Product 2', 'Category-1', 'Brand 2', 'variant-3', '2499', '1', 'FLAT10', '1');\n        Analytics.productClick('Search Result');\n\n        // Product Detail Tracking\n        Analytics.addProduct(productId, name, category, brand, variant, price, quantity, coupon, position);\n        Analytics.trackDetail();\n        // example:\n        Analytics.addProduct('sku-2', 'Test Product 2', 'Category-1', 'Brand 2', 'variant-3', '2499', '1', 'FLAT10', '1');\n        Analytics.trackDetail();\n\n        // Add to cart Tracking\n        Analytics.addProduct(productId, name, category, brand, variant, price, quantity, coupon, position);\n        Analytics.trackCart('add');\n        // example:\n        Analytics.addProduct('sku-2', 'Test Product 2', 'Category-1', 'Brand 2', 'variant-3', '2499', '1', 'FLAT10', '1');\n        Analytics.addProduct('sku-2', 'Test Product 2', 'Category-1', 'Brand 2', 'variant-3', '2499', '1', 'FLAT10', '1');\n        Analytics.trackCart('add');\n\n        // Remove from cart Tracking\n        Analytics.addProduct(productId, name, category, brand, variant, price, quantity, coupon, position);\n        Analytics.trackCart('remove');\n        // example:\n        Analytics.addProduct('sku-2', 'Test Product 2', 'Category-1', 'Brand 2', 'variant-3', '2499', '1', 'FLAT10', '1');\n        Analytics.addProduct('sku-2', 'Test Product 2', 'Category-1', 'Brand 2', 'variant-3', '2499', '1', 'FLAT10', '1');\n        Analytics.trackCart('remove');\n\n        // Checkout Tracking\n        Analytics.addProduct(productId, name, category, brand, variant, price, quantity, coupon, position);\n        Analytics.trackCheckout(checkoutStep, optionValue);\n        // example:\n        Analytics.addProduct('sku-2', 'Test Product 2', 'Category-1', 'Brand 2', 'variant-3', '2499', '1', 'FLAT10', '1');\n        Analytics.addProduct('sku-2', 'Test Product 2', 'Category-1', 'Brand 2', 'variant-3', '2499', '1', 'FLAT10', '1');\n        Analytics.trackCheckout(1, 'Visa');\n\n        // Transaction Tracking\n        Analytics.addProduct(productId, name, category, brand, variant, price, quantity, coupon, position);\n        Analytics.trackTransaction(transactionId, affiliation, revenue, tax, shipping, coupon, list, step, option);\n        // example:\n        Analytics.addProduct('sku-2', 'Test Product 2', 'Category-1', 'Brand 2', 'variant-3', '2222', '1', 'MEN10', '1');\n        Analytics.addProduct('sku-2', 'Test Product 2', 'Category-1', 'Brand 2', 'variant-3', '1111', '1', 'WOMEN10', '1');\n        Analytics.trackTransaction('T1234', 'Online Store - Web', '3333', '10', '200', 'FLAT10', '', '', '');\n\n        // Promotion Impressions\n        Analytics.addPromo(productId, name, creative, position);\n        Analytics.addPromo(productId, name, creative, position);\n        Analytics.addPromo(productId, name, creative, position);\n        Analytics.pageView();\n        // Note: Before tracking promotion Click, call pageView otherwise promotion impressions will be treated as promotion clicks\n        // example:\n        Analytics.addPromo('PROMO_1234', 'Summer Sale', 'summer_banner2', 'banner_slot1');\n        Analytics.pageView();\n\n        // Promotion Clicks\n        Analytics.addPromo(promotionId, promotionName, creative, position);\n        Analytics.addPromo(promotionId, promotionName, creative, position);\n        Analytics.addPromo(promotionId, promotionName, creative, position);\n        Analytics.promoClick(promotionName);\n        // example:\n        Analytics.addPromo('PROMO_1234', 'Summer Sale', 'summer_banner2', 'banner_slot1');\n        Analytics.promoClick('Summer Sale');\n\n        // populate a custom dimension\n        Analytics.set('dimension1', 'Paid');\n\n        // Manually create script tag after using delayScriptTag\n        Analytics.createScriptTag({userId: 1234});\n\n        // Manually create Analytics script tag after using delayScriptTag\n        Analytics.createAnalyticsScriptTag({userId: 1234})\n        \n        //Track User Timings\n        Analytics.trackTimings(timingCategory, timingVar, timingValue, timingLabel)\n        //example:\n        var endTime = new Date().getTime();\n        var timeSpent = endTime - startTime;\n        Analytics.trackTimings('Time to Checkout', 'User Timings', timeSpent);\n\n    });\n```\n\n\n\n### directive\n\nAlternatively you can use a directive to avoid filling controllers with `Analytics.trackEvent()` statements. Note: the directive does not create an isolate scope.\n\n    <button type=\"button\" ga-track-event=\"['video', 'play', 'django.mp4']\"></button>\n\n    <!-- OR -->\n\n    <button type=\"button\" ga-track-event=\"['video', 'play', 'django.mp4', 4, true, {dimension15: 'My Custom Dimension', metric18: 8000}]\"></button>\n    \nYou can define the properties on your controller too `$scope.event = ['video', 'play', 'django.mp4']` and reference them\n\n    <button type=\"button\" ga-track-event=\"event\"></button>\n\n## configuration\n\n```js\n// setup your account\nAnalyticsProvider.setAccount('UA-XXXXX-xx');\n// automatic route tracking (default=true)\nAnalyticsProvider.trackPages(false);\n// Optional set domain (Use 'none' for testing on localhost)\nAnalyticsProvider.setDomainName('XXX');\n// Use display features plugin\nAnalyticsProvider.useDisplayFeatures(true);\n// Use analytics.js instead of ga.js\nAnalyticsProvider.useAnalytics(true);\n// Ignore first page view.\nAnalyticsProvider.ignoreFirstPageLoad(true);\n// Enable eCommerce module for analytics.js\nAnalyticsProvider.useECommerce(true, false);\n// Enable enhanced eCommerce module for analytics.js\nAnalyticsProvider.useECommerce(true, true);\n// Enable enhanced link attribution module for analytics.js or ga.js\nAnalyticsProvider.useEnhancedLinkAttribution(true);\n// Enable analytics.js experiments\nAnalyticsProvider.setExperimentId('12345');\n// Set custom cookie parameters for analytics.js\nAnalyticsProvider.setCookieConfig({\n  cookieDomain: 'foo.example.com',\n  cookieName: 'myNewName',\n  cookieExpires: 20000\n});\n// Change the default page event name. This is useful for ui-router, which fires $stateChangeSuccess instead of $routeChangeSuccess\nAnalyticsProvider.setPageEvent('$stateChangeSuccess');\n// Delay script tage creation...must manually call Analytics.createScriptTag() or Analytics.createAnalyticsScriptTag() to enable analytics\nAnalyticsProvider.delayScriptTag(true);\n\n```\n\n## AdBlock EasyPrivacy\n\nAdBlock has a module named [EasyPrivacy](https://easylist-downloads.adblockplus.org/easyprivacy.txt) that is meant to block web tracking scripts. angular-google-analytics.js gets filtered out by the EasyPrivacy blacklist.\n\nUsers who are already concatenating and minifying their scripts should not notice a problem as long as the new script name is not also on the EasyPrivacy blacklist. Alternatively, consider changing the filename manually.\n\n## Licence\nAs AngularJS itself, this module is released under the permissive [MIT license](http://revolunet.mit-license.org). Your contributions are always welcome.\n",
  "readmeFilename": "README.md",
  "_id": "angular-google-analytics@0.0.15"
}